---
- name: "BLOCK >> Get data, log, and parse from device"
  block:
    - name: "NXOS >> Collect OSPF PID {{ process.id }} info from switches"
      nxos_command:
        commands: "{{ commands }}"
      register: "CLI_OUTPUT"
      vars:
        ansible_connection: "network_cli"

    - name: "INCLUDE >> Run CLI output logging tasks"
      include_tasks: "../log.yml"

    - name: "SYS >> Parse NXOS text output into structured data"
      set_fact:
        OSPF_BASIC: "{{ CLI_OUTPUT.stdout[0] | nxos_ospf_basic }}"
        OSPF_NBR: "{{ CLI_OUTPUT.stdout[1] | nxos_ospf_neighbor }}"
        OSPF_DB: "{{ CLI_OUTPUT.stdout[2] | nxos_ospf_dbsum }}"
        OSPF_TRAF: "{{ CLI_OUTPUT.stdout[3] | nxos_ospf_traffic }}"
  when: "not ci_test"

- name: "BLOCK >> Substitute mock CI variables of parsed data"
  block:
    - name: "INCLUDE >> Load variables for this specific device"
      include_vars:
        file: "tests/vars/mock_{{ inventory_hostname }}.yml"

    - name: "SYS >> Ensure all variables are defined"
      assert:
        that:
          - "OSPF_BASIC is defined"
          - "OSPF_NBR is defined"
          - "OSPF_DB is defined"
          - "OSPF_TRAF is defined"
        msg: "Variable loading failed; not all data structures were defined"
  when: "ci_test"

- name: "SYS >> Sanity: Check that process ID {{ process.id }} matches"
  assert:
    that: "process.id | int == OSPF_BASIC.process.id"
    msg: |-
      CRITICAL ERROR! Parsed process ID did not match specification. This
      will likely result in the entire test run being invalid.
      Please submit an error report or contact development.
      expected {{ process.id }}, saw {{ OSPF_BASIC.process.id }}

- name: "INCLUDE >> Detailed OSPF statistics processing"
  include_tasks: "stats.yml"
  when: "process.stats is defined"  # not intf-specific, no loopback check
  loop: "{{ OSPF_TRAF }}"
  loop_control:
    label: "pid:{{ item.pid }}"

- name: "SYS >> Ensure router has {{ my_nbr_count | default('-') }} neighbors"
  assert:
    that: "my_nbr_count | int == OSPF_NBR | length"
    msg: |-
      Expected neighbor count did not match actual neighbors seen
      expected {{ my_nbr_count }}, saw {{ OSPF_NBR | length }}
  when: "my_nbr_count is defined"

# nxos uses "twoway" not "2way" like the others
- name: "SYS >> Assert that all OSPF neighbors are up and healthy"
  assert:
    that: >-
      item.state | lower == 'full' or
      (item.state | lower == 'twoway' and item.role | lower == 'drother')
    msg: |-
      Invalid neighbor. state must be full or a combination of twoway plus
      the drother role to be considered valid.
      saw {{ item }}
  loop: "{{ OSPF_NBR }}"
  loop_control:
    label: "nbr:{{ item.rid }}  state:{{ item.state }}  role:{{ item.role }}"

- name: "SYS >> Check process ID {{ process.id }} SPF tuning timers"
  assert:
    that:
      - "process.spf.init | int == OSPF_BASIC.process.init_spf"
      - "process.spf.min | int == OSPF_BASIC.process.min_spf"
      - "process.spf.max | int == OSPF_BASIC.process.max_spf"
    msg: |-
      Mismatched SPF tuning timer configuration from specification.
      expected -- saw
      init {{ process.spf.init }} -- {{ OSPF_BASIC.process.init_spf }}
      min  {{ process.spf.min }} -- {{ OSPF_BASIC.process.min_spf }}
      max  {{ process.spf.max }} -- {{ OSPF_BASIC.process.max_spf }}
  when: "process.spf is defined"

- name: "SYS >> Check reference bandwidth {{ process.ref_bw | default('-') }}"
  assert:
    that: "process.ref_bw | int == OSPF_BASIC.process.ref_bw"
    msg: |-
      Mismatched reference bandwidth from specification.
      expected {{ process.ref_bw }}, saw {{ OSPF_BASIC.process.ref_bw }}
  when: "process.ref_bw is defined"

- name: "SYS >> Dynamically determine if router should be an ABR"
  set_fact:
    SHOULD_BE_ABR: "{{ my_areas | length > 1 and 0 in my_areas }}"

- name: "SYS >> Ensure correct ABR status"
  assert:
    that: "OSPF_BASIC.process.is_abr == SHOULD_BE_ABR"
    msg: |-
      ABR status mismatch. expected {{ SHOULD_BE_ABR }} by inference,
      saw {{ OSPF_BASIC.process.is_abr }} on the actual device

- name: "SYS >> Ensure correct ASBR status"
  assert:
    that: "OSPF_BASIC.process.is_asbr == should_be_asbr"
    msg: |-
      ASBR status mismatch. expected {{ should_be_asbr }} by host config,
      saw {{ OSPF_BASIC.process.is_asbr }} on the actual device
  when: "should_be_asbr is defined"

- name: "SYS >> Ensure correct stub router status"
  assert:
    that: "OSPF_BASIC.process.is_stub_rtr == should_be_stub_rtr"
    msg: |-
      Stub router status mismatch. expected {{ should_be_stub_rtr }} by host
      config, saw {{ OSPF_BASIC.process.is_stub_rtr }} on the actual device
  when: "should_be_stub_rtr is defined"

- name: "SYS >> Ensure iteration area lists are equal length"
  assert:
    that:
      - "my_areas | length == OSPF_DB.areas | length"
      - "my_areas | length == OSPF_BASIC.areas | length"
    msg: |-
      Iteration lists must be same length, where the length is
      the number of areas that exist on a router. Ensure that
      the 'my_areas' list actually contains all of the areas expected
      to appear on a given router, no more and no less.
      saw my_areas:{{ my_areas | length }}
      saw OSPF_DB.areas:{{ OSPF_DB.areas | length }}
      saw OSPF_BASIC.areas:{{ OSPF_BASIC.areas | length }}

- name: "INCLUDE >> Perform iterative checks on area-specific parameters"
  include_tasks: "areas.yml"
  loop: "{{ my_areas | zip(OSPF_DB.areas, OSPF_BASIC.areas) | list }}"
  loop_control:
    label: "area_id:{{ item.0 }}"

- name: "SYS >> Check external LSA count (LSA5) in entire domain"
  assert:
    that: "process.max_lsa5 | int >= OSPF_DB.process.total_lsa5"
    msg: >-
      too many LSA5 {{ OSPF_DB.process.total_lsa5 }} < {{ process.max_lsa5 }}
  when: "process.max_lsa5 is defined"
...
